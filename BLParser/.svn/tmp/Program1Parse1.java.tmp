import components.map.Map;
import components.map.Map.Pair;
import components.program.Program;
import components.program.Program1;
import components.queue.Queue;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.statement.Statement;
import components.utilities.Reporter;
import components.utilities.Tokenizer;

/**
 * Layered implementation of secondary method {@code parse} for {@code Program}.
 *
<<<<<<< .mine
 * @author Andrew Cheng and Stacey Frye
||||||| .r113
=======
 * @author Bryce Putman and Cody Yang
>>>>>>> .r117
 *
 */
public final class Program1Parse1 extends Program1 {

    /*
     * Private members --------------------------------------------------------
     */

    /**
     * Parses a single BL instruction from {@code tokens} returning the
     * instruction name as the value of the function and the body of the
     * instruction in {@code body}.
     *
     * @param tokens
     *            the input tokens
     * @param body
     *            the instruction body
     * @return the instruction name
     * @replaces {@code body}
     * @updates {@code tokens}
     * @requires <pre>
     * {@code [<"INSTRUCTION"> is a proper prefix of tokens]}
     * </pre>
     * @ensures <pre>
     * {@code if [an instruction string is a proper prefix of #tokens] then
     *  parseInstruction = [name of instruction at start of #tokens]  and
     *  body = [Statement corresponding to statement string of body of
     *          instruction at start of #tokens]  and
     *  #tokens = [instruction string at start of #tokens] * tokens
     * else
     *  [reports an appropriate error message to the console and terminates client]}
     * </pre>
     */
    private static String parseInstruction(Queue<String> tokens,
            Statement body) {
        assert tokens != null : "Violation of: tokens is not null";
        assert body != null : "Violation of: body is not null";
        assert tokens.length() > 0 && tokens.front().equals("INSTRUCTION") : ""
                + "Violation of: <\"INSTRUCTION\"> is proper prefix of tokens";

<<<<<<< .mine
        String[] primitives = { "move", "turnleft", "turnright", "infect",
                "skip" };
        String Instruction = tokens.dequeue();
        Reporter.assertElseFatalError(Instruction.equals("INSTRUCTION"),
                "Error: Keyword" + "\"" + "INSTRUCTION" + "\""
                        + "expected, found: " + "\"" + Instruction + "\"");

        String instructionName = tokens.dequeue();
        for (String element : primitives) {
            Reporter.assertElseFatalError(!element.equals(instructionName),
                    "Error: New instruction name must not be name "
                            + "of primitive instruction " + "\"" + element
                            + "\"");
||||||| .r113
=======
        tokens.dequeue();
        String instrName = tokens.dequeue();
        System.out.println(instrName);
        Reporter.assertElseFatalError(
                !instrName.equals("infect") && !instrName.equals("turnleft")
                        && !instrName.equals("turnright")
                        && !instrName.equals("move")
                        && !instrName.equals("skip"),
                "Violation of: the name of this instruction does not equal the name "
                        + "of a primitive instruction in the BL language");
>>>>>>> .r117

<<<<<<< .mine
        }
        String is = tokens.dequeue();
        Reporter.assertElseFatalError(is.equals("IS"), "Error: Keyword" + "\""
                + "IS" + "\"" + "expected, found: " + "\"" + is + "\"");
||||||| .r113
=======
        Reporter.assertElseFatalError(tokens.dequeue().equals("IS"),
                "Violation of: expected IS after [Instruction name]");
        Statement instructionBody = new Statement1Parse1();
>>>>>>> .r117

<<<<<<< .mine
        body.parseBlock(tokens);
||||||| .r113
=======
        instructionBody.parseBlock(tokens);

        System.out.println(tokens);
        Reporter.assertElseFatalError(
                tokens.dequeue().equals("END")
                        && tokens.dequeue().equals(instrName),
                "Violation of: Instruction ends with 'END [instructionName]'");
>>>>>>> .r117

        String end = tokens.dequeue();
        Reporter.assertElseFatalError(end.equals("END"),
                "Error: Keyword " + "\"" + "END" + "\"" + "expected, found: "
                        + "\"" + end + "\"");

<<<<<<< .mine
        String endInstruction = tokens.dequeue();

        Reporter.assertElseFatalError(instructionName.equals(endInstruction),
                "Error: IDENTIFIER" + "\"" + instructionName + "\""
                        + "at end of instruction" + "\"" + endInstruction + "\""
                        + "must equal instruction name");

        return instructionName;
||||||| .r113
=======
        return instrName;
>>>>>>> .r117
    }

    /*
     * Constructors -----------------------------------------------------------
     */

    /**
     * Default constructor.
     */
    public Program1Parse1() {
        super();
    }

    /*
     * Public methods ---------------------------------------------------------
     */

    @Override
    public void parse(SimpleReader in) {
        assert in != null : "Violation of: in is not null";
        assert in.isOpen() : "Violation of: in.is_open";
        Queue<String> tokens = Tokenizer.tokens(in);
        this.parse(tokens);
    }

    @Override
    public void parse(Queue<String> tokens) {
        assert tokens != null : "Violation of: tokens is not null";
        assert tokens.length() > 0 : ""
                + "Violation of: Tokenizer.END_OF_INPUT is a suffix of tokens";

<<<<<<< .mine
        Program newProgram = new Program1Parse1();
        String programToken = tokens.dequeue();

        // 1st token should be "PROGRAM"
        Reporter.assertElseFatalError(programToken.equals("PROGRAM"),
                "Error: Keyword \"PROGRAM\" expected, found: \"" + programToken
                        + "\"");

||||||| .r113
=======
>>>>>>> .r117
<<<<<<< .mine
        String programIdentifier = tokens.dequeue();
        String is = tokens.dequeue();
||||||| .r113
=======
        String firstToken = tokens.dequeue();
        String programNameStart = tokens.dequeue();
        String thirdToken = tokens.dequeue();
>>>>>>> .r117

<<<<<<< .mine
        // Check to for "IS"
        Reporter.assertElseFatalError(is.equals("IS"),
                "Error: Keyword \"IS\" expected, found: \"" + is + "\"");
||||||| .r113
=======
        Reporter.assertElseFatalError(firstToken.equals("PROGRAM"),
                "Violation of: the first token is 'PROGRAM'. Found: '"
                        + firstToken + "'");
>>>>>>> .r117

<<<<<<< .mine
        //Map contains all Instructions, could be empty.
        Map<String, Statement> context = newProgram.newContext();
||||||| .r113
=======
        Reporter.assertElseFatalError(thirdToken.equals("IS"),
                "Violation of: the third token is 'IS'. Found: '" + thirdToken
                        + "'");
>>>>>>> .r117

        //Either Instruction or Begin
        String instrOrBeginToken = tokens.front();

<<<<<<< .mine
        while (instrOrBeginToken.equals("INSTRUCTION")) {
            Statement body = newProgram.newBody();
            String instructionName = parseInstruction(tokens, body);
            for (Pair<String, Statement> element : context) {
||||||| .r113
=======
        System.out.println(tokens);
        while (tokens.front().equals("INSTRUCTION")) {
            System.out.println("Front is INSTRUCTION");
            Statement body = new Statement1Parse1();
            String instrName = parseInstruction(tokens, body);
            Reporter.assertElseFatalError(!context.hasKey(instrName),
                    "Violation of : the name of each new user-defined instruction "
                            + "must be unique");
            context.add(instrName, body);
        }
        System.out.println(tokens);

        Reporter.assertElseFatalError(tokens.dequeue().equals("BEGIN"),
                "Violation of: BEGIN is prefix of body");
>>>>>>> .r117

<<<<<<< .mine
                Reporter.assertElseFatalError(
                        !element.key().equals(instructionName),
                        "Error: Instruction \"" + instructionName
                                + "\" cannot be already defined");

            }
            context.add(instructionName, body);
            instrOrBeginToken = tokens.front();

        }
||||||| .r113
=======
        programBody.parseBlock(tokens);
        System.out.println(programBody);

        String penultimateToken = tokens.dequeue();
        String programNameEnd = tokens.dequeue();

        Reporter.assertElseFatalError(programNameEnd.equals(programNameStart),
                "Violation of: the program name at the end of the program matches the initial program name. Found: '"
                        + programNameEnd + "' but expected: '"
                        + programNameStart + "'");

        Reporter.assertElseFatalError(penultimateToken.equals("END"),
                "Violation of: the penultimate token is 'END'. Found: '"
                        + penultimateToken + "'");

>>>>>>> .r117

        Reporter.assertElseFatalError(instrOrBeginToken.equals("BEGIN"),
                "Error: Keyword \"BEGIN\" expected, found: \""
                        + instrOrBeginToken + "\"");

        instrOrBeginToken = tokens.dequeue();
        Statement programBody = newProgram.newBody();
        programBody.parseBlock(tokens);

        String endToken = tokens.dequeue();

        // Check for "END"
        Reporter.assertElseFatalError(endToken.equals("END"),
                "Error: Keyword \"END\" expected, found: \"" + endToken + "\"");

        String endProgramIdentifier = tokens.dequeue();
        // ID Has to equal
        Reporter.assertElseFatalError(
                endProgramIdentifier.equals(programIdentifier),
                "Error: IDENTIFIER \"" + endProgramIdentifier
                        + "\" at end of instruction \"" + programIdentifier
                        + "\" must eqaul instruction name");

        //Checks for end of program.
        Reporter.assertElseFatalError(
                tokens.front().equals("### END OF INPUT ###"),
                "Error: END-OF-INPUT expected, found: " + "\"" + tokens.front()
                        + "\"");

        this.setName(programIdentifier);
//        this.swapBody(programBody);
        this.swapContext(context);

    }

    /*
     * Main test method -------------------------------------------------------
     */

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Get input file name
         */
        out.print("Enter valid BL program file name: ");
        String fileName = in.nextLine();
        /*
         * Parse input file
         */
        out.println("*** Parsing input file ***");
        Program p = new Program1Parse1();
        SimpleReader file = new SimpleReader1L(fileName);
        Queue<String> tokens = Tokenizer.tokens(file);
        file.close();
        p.parse(tokens);
        /*
         * Pretty print the program
         */
        out.println("*** Pretty print of parsed program ***");
        p.prettyPrint(out);

        in.close();
        out.close();
    }

}