import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.set.Set;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Put a short phrase describing the program here.
 *
 * @author Put your name here
 *
 */
public final class TagCloudGenerator {

    /**
     * No argument constructor--private to prevent instantiation.
     */

    private TagCloudGenerator() {
    }

    private static class IntegerGT implements Comparator<Integer> {
        @Override
        public int compare(Integer o1, Integer o2) {
            if (o1 < o2) {
                return 1;
            } else if (o1 > o2) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    /**
     * Returns the first "word" (maximal length string of characters not in
     * {@code separators}) or "separator string" (maximal length string of
     * characters in {@code separators}) in the given {@code text} starting at
     * the given {@code position}.
     *
     * @param text
     *            the {@code String} from which to get the word or separator
     *            string
     * @param position
     *            the starting index
     * @param separators
     *            the {@code Set} of separator characters
     * @return the first word or separator string found in {@code text} starting
     *         at index {@code position}
     * @requires 0 <= position < |text|
     * @ensures <pre>
     * nextWordOrSeparator =
     *   text[position, position + |nextWordOrSeparator|)  and
     * if entries(text[position, position + 1)) intersection separators = {}
     * then
     *   entries(nextWordOrSeparator) intersection separators = {}  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      intersection separators /= {})
     * else
     *   entries(nextWordOrSeparator) is subset of separators  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      is not subset of separators)
     * </pre>
     */

    private static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        String nextWordOrSeparator = "";

        boolean firstCharIsSeparator = separators
                .contains(text.charAt(position));

        int newPosition = position;

        while (newPosition < text.length() && separators
                .contains(text.charAt(newPosition)) == firstCharIsSeparator) {
            nextWordOrSeparator += text.charAt(newPosition);
            newPosition++;
        }

        return nextWordOrSeparator;
    }

    /**
     * Creates a map containing the words in the files (words meaning any
     * strings of alphabetical characters, also including apostrophes, to
     * include words such as can't) as keys, which are mapped to the number of
     * occurrences of those words as values.
     *
     * @param in
     *            the input stream, used to read in the words
     * @param separators
     *            a set containing separator characters
     * @return wordToCount
     * @ensures wordToCount = the words contained within in, mapped to the
     *          number of appearances of the word with in
     */
    private static Map<String, Integer> createWordToCountMap(SimpleReader in,
            Set<Character> separators) {
        Map<String, Integer> wordToCount = new Map1L<>();

        String text = "";
        int position = 0;
        boolean stringIsWord = true;
        while (!in.atEOS()) {
            text += in.nextLine();
        }
        // loops until end of input stream
        while (position < text.length()) {
            String string = nextWordOrSeparator(text, position, separators);
            stringIsWord = !separators.contains(string.charAt(0));
            if (stringIsWord) {
                if (wordToCount.hasKey(string)) {
                    wordToCount.replaceValue(string,
                            wordToCount.value(string) + 1);
                } else {
                    wordToCount.add(string, 1);
                }
            }
            position += string.length();
        }
        return wordToCount;

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        /*
         * Put your main program code here; it may call myMethod as shown
         */

        /*
         * Close input and output streams
         */
        in.close();
        out.close();

        IntegerGT ascendingComparator = new IntegerGT();
    }

}
